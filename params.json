{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Airstrip.js","body":"AirStrip.js\r\n=============\r\n\r\nThis project is meant to ease dealing with and tracking third-party javascript dependencies in large projects.\r\n\r\n\r\nBackground\r\n-------------\r\n\r\nModern js projects usually depend on numerous third-party libraries and frameworks \r\n(say: requirejs, handlebars, i18n, emberjs, jasmine).\r\n\r\nTracking versions of these, possibly patching or forking them, maintaining deps lists, then integrating \r\ninto the project can quickly become tedious.\r\n\r\nThe idea here is to help manage that, and list such dependencies (and versions) in YAML, build them uniformly,\r\n\"dispatching\" the results in a build directory to be then used by said projects.\r\n\r\n\r\nTechnology\r\n-------------\r\n\r\nWe use puke (https://github.com/webitup/puke), a (inhouse) versatile python build system.\r\n\r\nDependencies are listed in YAML.\r\n\r\nAnd ah, all this is likely not working on windows (though we know it does on OSX and reasonable Linuxes).\r\n\r\nHow to use\r\n-------------\r\n\r\n- clone: `git clone https://github.com/jsBoot/airstrip.js`\r\n- install puke: `pip install puke`\r\n- build it as-is: `cd aistrip.js; puke all`\r\n\r\nCheck the \"build\" directory.\r\n\r\nDoesn't work?\r\n-------------\r\n\r\nYou probably miss a build dependency required by one or the other third-party projects.\r\nPuke usually give you a hint about what's going wrong.\r\n\r\nDo you have ruby installed, along with rvm and bundle? If not, grab rvm and gem install bundle.\r\nDo you have nodejs and npm? If not, install them (aptitude install node, or brew install node, or\r\nwhichever method suits you).\r\n\r\nNot interested in the provided dependencies and their build requirements? Just wipe-out the Collection\r\nnode (see down below) and specify what you're interested in.\r\n\r\n\r\nConfiguration\r\n-------------\r\n\r\nEdit puke-yak.yaml:\r\n- create a new node \"user-USER-box-BOX:\", where USER is your unix nickname, and BOX the result of the `uname` command.\r\nThis node will be used to \"specialize\" your configuration (the generic configuration being stored in the \"yak:\" node)\r\n- add (at least) a node for \"DEPLOY_ROOT\": this is where the result of the build will be put (and likely from where\r\nyour web server will serve said resources)\r\n- when done editing, puke again (`puke all`)\r\n\r\nBuild result\r\n-------------\r\n\r\nIn your DEPLOY_ROOT directory you will find:\r\n- a number of \"static\" resources, copied from the src directory - these are mondane, edit or remove them at will\r\n- a lib directory, with category subdirectories, containing said built dependencies: frameworks (emberjs, jquery), \r\nloaders (requirejs, labjs), plugins, tooling, shims, etc\r\n- an airstrip.yaml file, containing a list of everything that has been built - this is the manifest to be used\r\nin other projects or build systems using this\r\n\r\nEvery dependency has been built or fetched, in versions specified in the yaml file, renamed, and minified\r\n(we use google closure to minify both css and js files, ECMA5 - not strict).\r\n\r\nListing and managing simple dependencies\r\n-------------\r\n\r\nEdit the puke-yak.yaml file again.\r\n\r\nGet the Yak.COLLECTION node.\r\n\r\nA typical entry looks like (\"stacktrace.js\" here):\r\n\r\n```\r\nstacktrace:\r\n    \"License\": \"PublicDomain\"\r\n    \"Destination\": \"shims-plus\"\r\n    \"Source\":\r\n        stacktrace-0.3.js: \"https://github.com/downloads/eriwen/javascript-stacktrace/stacktrace-0.3.js\"\r\n        stacktrace-jsboot.js: \"https://raw.github.com/webitup/javascript-stacktrace/master/stacktrace.js\"\r\n        stacktrace-trunk.js: \"https://raw.github.com/eriwen/javascript-stacktrace/master/stacktrace.js\"\r\n```\r\n\r\nThe root node (\"stacktrace\") is purely casual.\r\n\r\nYou should always specify the license of the project, obviously.\r\n\r\nThe \"Destination\" node is a category directory (will live under the lib/ output folder).\r\n\r\nThe \"Source\" node list \"versions\" that you want to track for this library. Each version is a key\r\nvalue pair, where the key is the final name you desire, and the value the url where to find the source.\r\n\r\nIn the case of stacktrace, we track three versions (a stable release, a forked release, and the upstream trunk).\r\n\r\n\r\nZipped dependencies\r\n-------------\r\n\r\nSome libraries come released in zip files.\r\n\r\nUsing these just requires:\r\n- to have a \"WHATEVER.zip: http://sourceurl\" entry in your \"Source\" node\r\n- to specify what to get from the zip in a \"Build\" node.\r\n\r\nFor example, LABJS:\r\n\r\n```\r\nlab:\r\n    \"License\": \"MIT\"\r\n    \"Destination\": \"loaders\"\r\n    \"Source\":\r\n        lab-2.0.3.zip: \"http://labjs.com/releases/LABjs-2.0.3.zip\"\r\n        lab-jsboot.js: \"https://raw.github.com/getify/LABjs/master/LAB.src.js\"\r\n        lab-trunk.js: \"https://raw.github.com/getify/LABjs/master/LAB.src.js\"\r\n    \"Build\":\r\n        type: 'zip'\r\n        dir: 'LABjs-2.0.3'\r\n        production:\r\n            lab-2.0.3.js: 'LAB.src.js'\r\n```\r\n\r\nHere we track three versions: two direct \"source form factor\", and one zip (the lab-2.0.3.zip entry \r\nin the \"Source\" node).\r\nIn order to extract a specific file from the zip, we define a \"Build\" section, type \"zip\", we name\r\nthe \"dir\" resulting from the zip extraction, and a \"production\" node that specifies (using the same\r\nkey value syntax as the \"Source\" node) which files (from the extracted dir) to get and rename.\r\n\r\n\r\nGit repositories and actual builds\r\n-------------\r\n\r\nIn order to clone a git repository, just add a \"git: sourceurl\" entry in your \"Source\" node.\r\n\r\nIf there is a build step in order to produce the actual result, you specify that using the \"Build\" node.\r\n\r\nFor example, Emberjs is built that way:\r\n\r\n```\r\nember:\r\n    \"License\": \"MIT\"\r\n    \"Destination\": \"frameworks\"\r\n    \"Source\":\r\n        ember.prod-0.9.6.js: \"https://github.com/downloads/emberjs/ember.js/ember-0.9.6.min.js\"\r\n        ember.debug-0.9.6.js: \"https://github.com/downloads/emberjs/ember.js/ember-0.9.6.js\"\r\n        ember.prod-1.0.pre.js: \"https://github.com/downloads/emberjs/ember.js/ember-1.0.pre.min.js\"\r\n        ember.debug-1.0.pre.js: \"https://github.com/downloads/emberjs/ember.js/ember-1.0.pre.js\"\r\n        git: \"git://github.com/emberjs/ember.js.git\"\r\n    \"Build\":\r\n        type: \"rake\"\r\n        dir: \"ember.js\"\r\n        production:\r\n            ember.debug-trunk.js: \"dist/ember.js\"\r\n            ember.prod-trunk.js: \"dist/ember.prod.js\"\r\n```\r\n\r\n... specifies a git entry in the Source list. Then requires build type \"rake\". Then copy two files\r\nfrom the dir.\r\n\r\nUnderstanding build and build types\r\n-------------\r\n\r\nFor now, the following build types are \"supported\":\r\n- rake\r\n- thor\r\n- make\r\n\r\nYou can pass random additional arguments to the command if you want, adding an \"extra\" node in the \"Build\" node.\r\n\r\nSpecifying any other build type (like \"zip\") will actually trigger no build operation, but is a way to let\r\nyou specify a \"working\" directory and copy files operations (using the \"production\" node) from a random dir (\"dir\").\r\n\r\nThere also exist the experimental \"sh\" build type. By specifying \"extra\" you can perform *any* build operations that way.\r\n\r\n\r\nLicense\r\n-------------\r\n\r\n\r\nMIT license.\r\nNote, though, that the result of the build it produces contains numerous softwares with various licenses,\r\nand that by using them means you should agree with their individual licenses, not with the MIT license of this system itself. ","tagline":"Third-party js dependencies manager","google":""}